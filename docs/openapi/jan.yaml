openapi: 3.0.0
info:
  title: API Reference
  description: |
    # Introduction
    Jan API is compatible with the [OpenAI API](https://platform.openai.com/docs/api-reference).
version: "0.1.8"
contact:
  name: Jan Discord
  url: https://discord.gg/7EcEz7MrvA
license:
  name: AGPLv3
  url: https://github.com/janhq/nitro/blob/main/LICENSE
servers:
  - url: https://localhost:1337/v1/
tags:
  - name: Models
    description: List and describe the various models available in the API.
  - name: Chat 
    description: |
      Given a list of messages comprising a conversation, the model will return a response.

  - name: Messages
    description: |
      Messages capture a conversation's content. This can include the content from LLM responses and other metadata from [chat completions](/specs/chats).

      - Users and assistants can send multimedia messages.

      - An [OpenAI Message API](https://platform.openai.com/docs/api-reference/messages) compatible endpoint at `localhost:1337/v1/messages`.

      - Jan's `messages` API is compatible with [OpenAI's Messages API](https://platform.openai.com/docs/api-reference/messages), with additional methods for managing messages locally.

  - name: Threads
    description: |
      Threads are conversations between an `assistant` and the user:
        - Users can tweak `model` params and `assistant` behavior within each thread.
        - Users can import and export threads.
        - An [OpenAI Thread API](https://platform.openai.com/docs/api-reference/threads) compatible endpoint at `localhost:1337/v1/threads`. 
  - name: Assistants
    description: Configures and utilizes different AI assistants for varied tasks
x-tagGroups:
  - name: Endpoints
    tags:
      - Models
      - Chat
  - name: Chat
    tags:
      - Assistants
      - Messages
      - Threads
paths:
  /chat/completions:
    post:
      operationId: createChatCompletion
      tags:
        - Chat
      summary: Create chat completion
      description: |
        <a  href = "https://platform.openai.com/docs/api-reference/chat/create">  <button style = "color: #388434"> OpenAI compatible </button></a>
        and <span style = "color: #fec928">  Jan specified </span>
        
        Creates a model response for the given chat conversation.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "specs/chat.yaml#/components/schemas/ChatCompletionRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "specs/chat.yaml#/components/schemas/ChatCompletionResponse"
      x-codeSamples:
        - lang: "curl"
          source: |
            curl -X POST 'http://localhost:3982/inferences/llamacpp/chat_completion' \
                  -H "Content-Type: application/json" \
                  -d '{
                    "llama_model_path": "/path/to/your/model.gguf",
                    "messages": [
                      {
                        "role": "user",
                        "content": "hello"
                      },
                    ]
                  }'
      
  ### MODELS
  /models:
    get:
      operationId: listModels
      tags:
        - Models

      summary: List models
      description: |
        <a  href = "https://platform.openai.com/docs/api-reference/models/list">  <button style = "color: #388434"> OpenAI compatible </button></a>

        Lists the currently available models, and provides basic information about each one such as the owner and availability.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "specs/models.yaml#/components/schemas/ListModelsResponse"
      x-codeSamples:
        - lang: "curl"
          source: |
            curl https://localhost:1337/v1/models
    post:
      operationId: downloadModel
      tags:
        - Models
      summary: Download model
      description: |
        <span style = "color: #fec928"> Jan </span>

        Download a model.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "specs/models.yaml#/components/schemas/DownloadModelResponse"
      x-codeSamples:
        - lang: "curl"
          source: |
            curl -X POST https://localhost:1337/v1/models
  /models/{model_id}:          
    get:
      operationId: retrieveModel
      tags:
        - Models
      summary: Retrieve model
      description: |
        <a  href = "https://platform.openai.com/docs/api-reference/models/retrieve">  <button style = "color: #388434"> OpenAI compatible </button></a>
        
        Get a model instance, providing basic information about the model such as the owner and permissioning.
      parameters:
        - in: path
          name: model_id
          required: true
          schema:
            type: string
            # ideally this will be an actual ID, so this will always work from browser
            example: zephyr-7b
          description: |
            The ID of the model to use for this request

            <span style="color:#388434">OpenAI compatible</span>
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "specs/models.yaml#/components/schemas/GetModelResponse"
      x-codeSamples:
        - lang: "curl"
          source: |
            curl https://localhost:1337/v1/models/zephyr-7b
    delete:
      operationId: deleteModel
      tags:
        - Models
      summary: Delete model
      description: |
        <a  href = "https://platform.openai.com/docs/api-reference/models/delete">  <button style = "color: #388434"> OpenAI compatible </button></a>
        
        Delete a model.
      parameters:
        - in: path
          name: model
          required: true
          schema:
            type: string
            example: zephyr-7b
          description: |
            The model to delete
            
            <span style="color:#388434">OpenAI compatible</span>
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "specs/models.yaml#/components/schemas/DeleteModelResponse"
      x-codeSamples:
        - lang: "curl"
          source: |
            curl -X DELETE https://localhost:1337/v1/models/zephyr-7b      
  /models/{model_id}/start:
    put:
      operationId: startModel
      tags:
        - Models
      summary: Start model
      description: |
        <span style = "color: #fec928"> Jan </span>

        Starts an imported model. Loads the model into V/RAM.
      parameters:
        - in: path
          name: model
          required: true
          schema:
            type: string
            # ideally this will be an actual ID, so this will always work from browser
            example: zephyr-7b
          description: |
            The ID of the model to use for this request
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "specs/models.yaml#/components/schemas/StartModelResponse"
      x-codeSamples:
        - lang: "curl"
          source: |
            curl -X PUT https://localhost:1337/v1/models/zephyr-7b/start      
  /models/{model_id}/stop:
    put:
      operationId: stopModel
      tags:
        - Models
      summary: Stop model
      description: |
        <span style = "color: #fec928"> Jan </span>

        Stop an imported model.
      parameters:
        - in: path
          name: model
          required: true
          schema:
            type: string
            # ideally this will be an actual ID, so this will always work from browser
            example: zephyr-7b
          description: The ID of the model to use for this request
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "specs/models.yaml#/components/schemas/StopModelResponse"
      x-codeSamples:
        - lang: "curl"
          source: |
            curl -X PUT https://localhost:1337/v1/models/zephyr-7b/stop

  ### THREADS
  /threads:
    post:
      operationId: createThread
      tags:
        - Threads
      summary: Create thread
      description: |
        <a  href = "https://platform.openai.com/docs/api-reference/threads/createThread">  <button style = "color: #388434"> OpenAI compatible </button></a>

        Create a thread
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                messages:
                  type: array
                  description: "Initial set of messages for the thread."
                  items:
                    $ref: 'specs/threads.yaml#/components/schemas/ThreadMessageObject'
      responses:
        "200":
          description: Thread created successfully
          content:
            application/json:
              schema:
                $ref: 'specs/threads.yaml#/components/schemas/CreateThreadResponse'
      x-codeSamples:
        - lang: "cURL"
          source: |
            curl -X POST {JAN_URL}/v1/threads \
              -H "Content-Type: application/json" \
              -d '{
                  "messages": [{
                      "role": "user",
                      "content": "Hello, what is AI?",
                      "file_ids": ["file-abc123"]
                  }, {
                      "role": "user",
                      "content": "How does AI work? Explain it in simple terms."
                  }]
              }'    
    get:
      operationId: listThreads
      tags:
        - Threads
      summary: List threads
      description: |
        <span style = "color: #fec928"> Jan </span>

        Retrieves a list of all threads available in the system.
      responses:
        "200":
          description: List of threads retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'specs/threads.yaml#/components/schemas/ThreadObject'
                example:
                  - id: "thread_abc123"
                    object: "thread"
                    created_at: 1699014083
                    assistants: ["assistant-001"]
                    metadata: {}
                    messages: []
                  - id: "thread_abc456"
                    object: "thread"
                    created_at: 1699014083
                    assistants: ["assistant-002", "assistant-003"]
                    metadata: {}
      x-codeSamples:
        - lang: "curl"
          source: |
              curl {JAN_URL}/v1/threads \
                -H "Content-Type: application/json" \
  
  /threads/{thread_id}:
    get:
      operationId: getThread
      tags:
        - Threads
      summary: Retrieve thread
      description: |
        <a  href = "https://platform.openai.com/docs/api-reference/threads/getThread">  <button style = "color: #388434"> OpenAI compatible </button></a>
        
        Retrieves detailed information about a specific thread using its thread_id.
      parameters:
        - in: path
          name: thread_id
          required: true
          schema:
            type: string
            example: thread_abc123
          description: |
            The ID of the thread to retrieve.

            <span style="color:#388434">OpenAI compatible</span>
      responses:
        "200":
          description: Thread details retrieved successfully
          content:
            application/json:
              schema:
                $ref: "specs/threads.yaml#/components/schemas/GetThreadResponse"
      x-codeSamples:
        - lang: "curl"
          source: |
            curl {JAN_URL}/v1/threads/{thread_id}
    post:
      operationId: modifyThread
      tags:
        - Threads
      summary: Modify thread
      description: |
        <a  href = "https://platform.openai.com/docs/api-reference/threads/modifyThread">  <button style = "color: #388434"> OpenAI compatible </button></a>

        Modifies a thread
      parameters:
        - in: path
          name: thread_id
          required: true
          schema:
            type: string
            example: thread_abc123
          description: |
            The ID of the thread to be modified.

            <span style="color:#388434">OpenAI compatible</span>
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                messages:
                  type: array
                  description: "Set of messages to update in the thread."
                  items:
                    $ref: 'specs/threads.yaml#/components/schemas/ThreadMessageObject'
      responses:
        "200":
          description: Thread modified successfully
          content:
            application/json:
              schema:
                $ref: 'specs/threads.yaml#/components/schemas/ModifyThreadResponse'
      x-codeSamples:
        - lang: "curl"
          source: |
                curl -X POST {JAN_URL}/v1/threads/{thread_id} \
                  -H "Content-Type: application/json" \
                  -d '{
                      "messages": [{
                          "role": "user",
                          "content": "Hello, what is AI?",
                          "file_ids": ["file-abc123"]
                      }, {
                          "role": "user",
                          "content": "How does AI work? Explain it in simple terms."
                      }]
                  }'
      
    delete:
      operationId: deleteThread
      tags:
        - Threads
      summary: Delete thread
      description: |
        <a  href = "https://platform.openai.com/docs/api-reference/threads/deleteThread">  <button style = "color: #388434"> OpenAI compatible </button></a>

        Delete a thread
      parameters:
        - in: path
          name: thread_id
          required: true
          schema:
            type: string
            example: thread_abc123
          description: |
            The ID of the thread to be deleted.

            <span style="color:#388434">OpenAI compatible</span>
      responses:
        "200":
          description: Thread deleted successfully
          content:
            application/json:
              schema:
                $ref: 'specs/threads.yaml#/components/schemas/DeleteThreadResponse'
      x-codeSamples:
        - lang: "curl"
          source: |
            curl -X DELETE {JAN_URL}/v1/threads/{thread_id}


  /threads/{thread_id}/assistants:
    get:
      operationId: getThreadAssistants
      tags:
        - Threads
      summary: Get Thread.Assistants
      description: |
        <span style = "color: #fec928"> Jan </span>

        Can achieve this goal by calling Get thread API
      parameters:
        - in: path
          name: thread_id
          required: true
          schema:
            type: string
            example: thread_abc123
          description: The ID of the thread to retrieve.
      responses:
        "200":
          description: Thread details retrieved successfully
          content:
            application/json:
              schema:
                $ref: "specs/threads.yaml#/components/schemas/GetThreadResponse"
      x-codeSamples:
        - lang: "curl"
          source: |
            curl {JAN_URL}/v1/threads/{thread_id}/assistants

  /threads/{thread_id}/assistants/{assistants_id}:
    post:
      operationId: postThreadAssistants
      tags:
        - Threads
      summary: Modify Thread.Assistants
      description: |
        <span style = "color: #fec928"> Jan </span>

        Can achieve this goal by calling Modify Assistant API with thread.assistant[]
  
  /threads/{thread_id}/:
    get:
      operationId: listThreadMessage
      tags:
        - Threads
      summary: List Thread.Messages
      description: | 
        <span style = "color: #fec928"> Jan </span>
        
        Can achieve this goal by calling Get Thread API
      parameters:
        - in: path
          name: thread_id
          required: true
          schema:
            type: string
            example: thread_abc123
          description: The ID of the thread to retrieve.
      responses:
        "200":
          description: Thread details retrieved successfully
          content:
            application/json:
              schema:
                $ref: "specs/threads.yaml#/components/schemas/GetThreadResponse"
      x-codeSamples:
        - lang: "curl"
          source: |
            curl {JAN_URL}/v1/threads/{thread_id}

  ### MESSAGES
  /threads/{thread_id}/messages:
    get:
      operationId: listMessages
      tags:
        - Messages
      summary: List messages
      description: |
        <a  href = "https://platform.openai.com/docs/api-reference/messages/listMessages">  <button style = "color: #388434"> OpenAI compatible </button></a>

        Retrieves all messages from the given thread.
      parameters:
        - in: path
          name: thread_id
          required: true
          schema:
            type: string
            example: thread_abc123
          description: |
            The ID of the thread from which to retrieve messages.

            <span style="color:#388434">OpenAI compatible</span>
      responses:
        "200":
          description: List of messages retrieved successfully
          content:
            application/json:
              schema:
                $ref: "specs/messages.yaml#/components/schemas/ListMessagesResponse"
      x-codeSamples:
        - lang: "curl"
          source: |
            curl {JAN_URL}/v1/threads/{thread_id}/messages \
              -H "Content-Type: application/json"
    post:
      operationId: createMessage
      tags:
        - Messages
      summary: Create message
      description: |
        <a  href = "https://platform.openai.com/docs/api-reference/messages/createMessage">  <button style = "color: #388434"> OpenAI compatible </button></a>

        Create a message
      parameters:
        - in: path
          name: thread_id
          required: true
          schema:
            type: string
            example: thread_abc123
          description: |
            The ID of the thread to which the message will be posted.

            <span style="color:#388434">OpenAI compatible</span>
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  type: string
                  description: |
                    "Role of the sender, either 'user' or 'assistant'."

                    <span style="color:#388434">OpenAI compatible</span>
                  example: "user"
                  enum: ["user", "assistant"]
                content:
                  type: string
                  description: |
                    "Text content of the message."

                    <span style="color:#388434">OpenAI compatible</span>
                  example: "How does AI work? Explain it in simple terms."
              required:
                - role
                - content
      responses:
        "200":
          description: Message created successfully
          content:
            application/json:
              schema:
                $ref: "specs/messages.yaml#/components/schemas/CreateMessageResponse"
      x-codeSamples:
        - lang: "curl"
          source: |
              curl -X POST {JAN_URL}/v1/threads/{thread_id}/messages \
                -H "Content-Type: application/json" \
                -d '{
                  "role": "user",
                  "content": "How does AI work? Explain it in simple terms."
                }'

  /threads/{thread_id}/messages/{message_id}:
    get:
      operationId: retrieveMessage
      tags:
        - Messages
      summary: Retrieve message
      description: |
        <a  href = "https://platform.openai.com/docs/api-reference/messages/getMessage">  <button style = "color: #388434"> OpenAI compatible </button></a>

        Retrieve a specific message from a thread using its thread_id and message_id.
      parameters:
        - in: path
          name: thread_id
          required: true
          schema:
            type: string
            example: thread_abc123
          description: |
            The ID of the thread containing the message.

            <span style="color:#388434">OpenAI compatible</span>
        - in: path
          name: message_id
          required: true
          schema:
            type: string
            example: msg_abc123
          description: |
            The ID of the message to retrieve.

            <span style="color:#388434">OpenAI compatible</span>
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "specs/messages.yaml#/components/schemas/GetMessageResponse"
      x-codeSamples:
        - lang: "curl"
          source: |
                curl {JAN_URL}/v1/threads/{thread_id}/messages/{message_id} \
                  -H "Content-Type: application/json"

  /threads/{thread_id}/messages/{message_id}/files:
    get:
      operationId: listMessageFiles
      tags:
        - Messages
      summary: List message files 
      description: | 
        <a  href = "https://platform.openai.com/docs/api-reference/messages/listMessageFiles">  <button style = "color: #388434"> OpenAI compatible </button></a>

        Returns a list of message files.
      parameters:
        - in: path
          name: thread_id
          required: true
          schema:
            type: string
            example: thread_abc123
          description: |
            The ID of the thread containing the message.

            <span style="color:#388434">OpenAI compatible</span>
        - in: path
          name: message_id
          required: true
          schema:
            type: string
            example: msg_abc123
          description: | 
            The ID of the message whose files are to be listed. 
            
            <span style="color:#388434">OpenAI compatible</span>
      responses:
        "200":
          description: List of files retrieved successfully
          content:
            application/json:
              schema:
                $ref: "specs/messages.yaml#/components/schemas/ListMessageFilesResponse"
      x-codeSamples:
        - lang: "curl"
          source: |
            curl {JAN_URL}/v1/threads/{thread_id}/messages/{message_id}/files \
              -H "Content-Type: application/json"

  /threads/{thread_id}/messages/{message_id}/files/{file_id}:
    get:
      operationId: retrieveMessageFile
      tags:
        - Messages
      summary: Retrieve message file
      description: |
        <a  href = "https://platform.openai.com/docs/api-reference/messages/getMessageFile">  <button style = "color: #388434"> OpenAI compatible </button></a>

        Retrieves a file associated with a specific message in a thread.
      parameters:
        - in: path
          name: thread_id
          required: true
          schema:
            type: string
            example: thread_abc123
          description: |
            The ID of the thread containing the message.

            <span style="color:#388434">OpenAI compatible</span>
        - in: path
          name: message_id
          required: true
          schema:
            type: string
            example: msg_abc123
          description: |
            The ID of the message associated with the file.

            <span style="color:#388434">OpenAI compatible</span>
        - in: path
          name: file_id
          required: true
          schema:
            type: string
            example: file-abc123
          description: |
            The ID of the file to retrieve.
            
            <span style="color:#388434">OpenAI compatible</span>
      responses:
        "200":
          description: File retrieved successfully
          content:
            application/json:
              schema:
                $ref: "specs/messages.yaml#/components/schemas/MessageFileObject"
      x-codeSamples:
        - lang: "curl"
          source: |
            curl {JAN_URL}/v1/threads/{thread_id}/messages/{message_id}/files/{file_id} \
              -H "Content-Type: application/json"

x-webhooks:
  ModelObject:
    post:
      summary: The model object
      description: |
        <a  href = "https://platform.openai.com/docs/api-reference/models/object">  <button style = "color: #388434"> OpenAI compatible </button></a>
        
        Describe a model offering that can be used with the API.


      operationId: ModelObject
      tags:
        - Models
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'specs/models.yaml#/components/schemas/ModelObject'

  MessageObject:
    post:
      summary: The message object
      description: |
        <a  href = "https://platform.openai.com/docs/api-reference/messages/object">  <button style = "color: #388434"> OpenAI compatible </button></a>

        Information about a message in the thread
      operationId: MessageObject
      tags:
        - Messages
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'specs/messages.yaml#/components/schemas/MessageObject'

  ThreadObject:
    post:
      summary: The thread object
      description: |
        <a  href = "https://platform.openai.com/docs/api-reference/threads/object">  <button style = "color: #388434"> OpenAI compatible </button></a> and <span style = "color: #fec928"> Jan </span>
       
        Each `thread` folder contains a `thread.json` file, which is a representation of a thread.
        
        `thread.json` contains metadata and model parameter overrides.
        
        There are no required fields.

      operationId: ThreadObject
      tags:
        - Threads
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'specs/threads.yaml#/components/schemas/ThreadObject'
