# docker version
version: "3"

# volumes:
#   keycloak_postgres_data:
#   db_data:

services:
  keycloak:
    image: quay.io/keycloak/keycloak:${KEYCLOAK_VERSION-22.0.0}
    command: ["start-dev", "--import-realm", "--http-port", "8088"]
    environment:
      KC_DB: postgres
      KC_DB_URL_HOST: keycloak_postgres
      KC_DB_URL_DATABASE: ${POSTGRES_DB_NAME:-keycloak}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      KC_DB_USERNAME: ${POSTGRES_USERNAME:-postgres}
      KC_DB_SCHEMA: ${KC_DB_SCHEMA:-public}
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN-admin}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD-admin}
    volumes:
      - ./conf/keycloak_conf:/opt/keycloak/data/import
    ports:
      - "8088:8088"
    depends_on:
      keycloak_postgres:
        condition: service_healthy
    networks:
      jan_community:

  keycloak_postgres:
    image: postgres:13
    command: postgres -c 'max_connections=200' && postgres -c 'shared_buffers=24MB'
    environment:
      # Environment Variables expecially for Postgres
      POSTGRES_DB: ${POSTGRES_DB_NAME:-keycloak}
      POSTGRES_USER: ${POSTGRES_USERNAME:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      PGDATA: /data/postgres
      PGPORT: ${POSTGRES_PORT:-5432}
    healthcheck:
      test: "exit 0"
    # volumes:
    #   - keycloak_postgres_data:/data/postgres
    ports:
      - ${POSTGRES_PORT:-5432}:${POSTGRES_PORT:-5432}
    networks:
      jan_community:

  postgres:
    image: postgres:13
    restart: always
    # volumes:
    #   - db_data:/var/lib/postgresql/data
    env_file:
      - conf/sample.env_app-backend-postgres
  graphql-engine:
    image: hasura/graphql-engine:v2.31.0.cli-migrations-v3
    ports:
      - "8080:8080"
    restart: always
    env_file:
      - conf/sample.env_app-backend
    volumes:
      - ./app-backend/hasura/migrations:/migrations
      - ./app-backend/hasura/metadata:/metadata
    depends_on:
      data-connector-agent:
        condition: service_healthy
    networks:
      jan_community:

  worker:
    build:
      context: ./app-backend
      dockerfile: ./worker/Dockerfile
    restart: always
    environment:
      - "NODE_ENV=development"
    volumes:
      - .:/worker
    ports:
      - "8787:8787"
    networks:
      jan_community:

  data-connector-agent:
    image: hasura/graphql-data-connector:v2.31.0
    restart: always
    ports:
      - 8081:8081
    environment:
      QUARKUS_LOG_LEVEL: ERROR # FATAL, ERROR, WARN, INFO, DEBUG, TRACE
      ## https://quarkus.io/guides/opentelemetry#configuration-reference
      QUARKUS_OPENTELEMETRY_ENABLED: "false"
      ## QUARKUS_OPENTELEMETRY_TRACER_EXPORTER_OTLP_ENDPOINT: http://jaeger:4317
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/api/v1/athena/health"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 5s
    networks:
      jan_community:

  web:
    build:
      context: ./web-client
      dockerfile: dev.Dockerfile
    container_name: jan_web
    restart: always
    env_file:
      - conf/sample.env_web-client
    volumes:
      - .:/app
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
    networks:
      jan_community:

networks:  
  jan_community:
